{"version":3,"sources":["components/Header/index.tsx","hooks/useTeamBuilder.tsx","components/PlayerList/index.tsx","components/TeamBuilder/index.tsx","components/TeamList/index.tsx","App.tsx","index.tsx"],"names":["Header","className","TeamBuilderContext","createContext","TeamBuilderProvider","children","useState","players","setPlayes","totalTeams","setTotalTeams","teams","setTeams","playersPerTeam","setPlayersPerTeam","totalPlayers","setTotalPlayers","Provider","value","addPlayers","e","target","name","clonePlayers","existentPlayer","find","playerData","push","shuffleTeams","rand","length","shuffledPlayers","Array","fill","index","Math","floor","random","cloneTeam","i","shuffledTeam","splice","useTeamBuilder","useContext","PlayerList","props","buttonDisable","setButtonDisable","auxArray","numberOfPlayers","map","_value","type","onChange","onClick","disabled","TeamBuilder","showPlayersInput","setShowPlayersInput","htmlFor","id","Number","TeamList","team","player","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3240ca39.chunk.js","sourcesContent":["import './style.css';\n\nexport function Header() {\n  return (\n    <header className=\"header\">\n      <h1>Sorteador dos crias</h1>\n    </header>\n  )\n}","import { ChangeEvent, createContext, useContext, useState } from 'react';\n\ninterface TeamBuilderContextProps {\n  teams: Team[];\n  setTotalTeams: (totalTeams: number) => void;\n  addPlayers: (e: ChangeEvent<HTMLInputElement>) => void;\n  shuffleTeams: () => void;\n  setPlayersPerTeam: (playersPerTeam: number) => void;\n  setTotalPlayers: (totalPlayers: number) => void;\n  playersPerTeam: number;\n  totalPlayers: number;\n}\n\nconst TeamBuilderContext = createContext({} as TeamBuilderContextProps);\n\ninterface TeamBuilderProviderProps {\n  children: React.ReactNode;\n}\n\ninterface Player {\n  name: string;\n  value: string;\n}\n\nexport type Team = Player[]\n\nexport function TeamBuilderProvider({ children }: TeamBuilderProviderProps) {\n  const [ players, setPlayes ] = useState<Player[]>([]); \n  const [ totalTeams, setTotalTeams ] = useState(0);\n  const [ teams, setTeams ] = useState<Team[]>([]);\n\n  const [ playersPerTeam, setPlayersPerTeam ] = useState(6);\n  const [ totalPlayers, setTotalPlayers ] = useState(0);\n\n  function addPlayers(e: ChangeEvent<HTMLInputElement>) {\n    const { name, value } = e.target;\n\n    const clonePlayers = [ ...players ];\n    \n    const existentPlayer = clonePlayers.find((playerData) => playerData.name === name);\n\n    if(existentPlayer) {\n      existentPlayer.value = value;\n    } else {\n      clonePlayers.push({ name, value });\n    }\n\n    setPlayes(clonePlayers);\n  }\n\n  function shuffleTeams() {\n    let length = players.length;\n    let shuffledPlayers: Player[] = Array(length).fill({ name: \"\", value: \"\" });\n\n    for (let index = 0, rand; index < length; index++) {\n      rand = Math.floor(Math.random() * (index));\n      if (rand !== index) shuffledPlayers[index] = shuffledPlayers[rand];\n      shuffledPlayers[rand] = players[index];\n    }\n\n    const cloneTeam = [...teams];\n    for (let i = 1; i <= Math.floor(totalTeams); i++) {\n      let shuffledTeam: Player[] = shuffledPlayers.splice(0, playersPerTeam);\n      cloneTeam.push(shuffledTeam);\n    }\n    if (shuffledPlayers.length > 0 ) {\n      cloneTeam.push(shuffledPlayers);\n    }\n\n    setTeams(cloneTeam);\n  }\n\n  return (\n    <TeamBuilderContext.Provider\n      value={{\n        teams,\n        setTotalTeams,\n        addPlayers,\n        shuffleTeams,\n        setPlayersPerTeam,\n        setTotalPlayers,\n        playersPerTeam,\n        totalPlayers\n      }}\n    >\n      { children }\n    </TeamBuilderContext.Provider>\n  )\n}\n\nexport function useTeamBuilder() {\n  const context = useContext(TeamBuilderContext);\n\n  return context;\n}","import { useState } from 'react';\nimport { useTeamBuilder } from '../../hooks/useTeamBuilder';\nimport './style.css';\n\ninterface PlayerListProps {\n  numberOfPlayers: number;\n}\n\nexport function PlayerList(props: PlayerListProps) {\n  const { addPlayers, shuffleTeams } = useTeamBuilder();\n  const [ buttonDisable, setButtonDisable ] = useState(false);\n\n  const auxArray = Array(props.numberOfPlayers).fill(\"\");\n\n  function handleClick() {\n    shuffleTeams();\n    setButtonDisable(true);\n  }\n\n  return (\n    <div className=\"player-list\">\n      <h3>Insira os nomes dos jogadores</h3>\n\n      {\n        auxArray.map((_value, index) => (\n          <input\n            key={`input-player-${index}`}\n            type=\"text\"\n            name={`player-${index}`}\n            className=\"input-player\"\n            onChange={(e) => addPlayers(e)}\n          />\n        ))\n      }\n\n      <button \n        type=\"button\"\n        onClick={handleClick}\n        disabled={buttonDisable}\n      >\n        Sortear time\n      </button>\n    </div>\n  )\n}","import { useState } from 'react';\nimport { useTeamBuilder } from '../../hooks/useTeamBuilder';\nimport { PlayerList } from '../PlayerList';\nimport './style.css';\n\nexport function TeamBuilder() {\n  const {\n    setTotalPlayers,\n    setPlayersPerTeam,\n    totalPlayers,\n    playersPerTeam,\n    setTotalTeams\n  } = useTeamBuilder();\n\n  const [ buttonDisable, setButtonDisable ] = useState(false);\n  const [ showPlayersInput, setShowPlayersInput ] = useState(false);\n\n  function handleTeams() {\n    const numberOfTeams = totalPlayers / playersPerTeam;\n\n    setTotalTeams(numberOfTeams);\n    setShowPlayersInput(true);\n    setButtonDisable(true);\n  }\n\n  return (\n    <div className=\"team-builder-container\">\n      <form>\n        <label htmlFor=\"total-players\" >Total de jogadores</label>\n        <input\n          type=\"number\"\n          name=\"total-players\"\n          id=\"total-players\"\n          value={totalPlayers}\n          onChange={(e) => setTotalPlayers(Number(e.target.value))}\n        />\n\n        <label htmlFor=\"players-per-team\">Jogadores por time</label>\n        <input\n          type=\"number\"\n          name=\"players-per-team\"\n          id=\"players-per-team\"\n          value={playersPerTeam}\n          onChange={(e) => setPlayersPerTeam(Number(e.target.value))}\n        />\n\n        <button\n          type=\"button\"\n          onClick={handleTeams}\n          disabled={buttonDisable}\n        >\n          Inserir jogadores\n        </button>\n\n        { showPlayersInput &&  <PlayerList numberOfPlayers={totalPlayers} /> }\n      </form>\n    </div>\n  )\n}","import { useTeamBuilder } from '../../hooks/useTeamBuilder';\n\nimport './style.css';\n\nexport function TeamList() {\n  const { teams } = useTeamBuilder();\n\n  return (\n    <div className=\"team-list\">\n      <ul>\n        {\n          teams.map((team, index) => (\n            <li key={`box-team-${index+1}`}>\n              <header>\n                <h2>{`Time ${index+1}`}</h2>\n              </header>\n              <section>\n                <strong>Jogadores</strong>\n                {\n                  team.map((player) => (\n                    <p key={`box-player-${index+1}-${player.name}`}>{player.value}</p>\n                  ))\n                }\n              </section>\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  )\n}","import { Header } from './components/Header';\nimport { TeamBuilder } from './components/TeamBuilder';\nimport { TeamList } from './components/TeamList';\n\nimport { TeamBuilderProvider } from './hooks/useTeamBuilder';\n\nimport './styles/global.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TeamBuilderProvider>\n        <Header />\n        <TeamBuilder />\n        <TeamList />\n      </TeamBuilderProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}